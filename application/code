import java.util.List;

public static int longestArraySegment(int array_length ,List<Integer> list) {
    int longestInc = 1; // longest ever-increasing segment
    int longestDec = 1; // longest ever-decreasing segment
    int currInc = 1; // current length of increasing segment
    int currDec = 1; // current length of decreasing segment
    int size = list.size(); // size of list
    
    // check for ever-increasing and ever-decreasing segments
    for (int i = 1; i < size; i++) {
        if (list.get(i) >= list.get(i-1)) { // increasing segment
            currInc++;
            currDec = 1;
        }
        else { // decreasing segment
            currDec++;
            currInc = 1;
        }
        
        // update longest segments if necessary
        if (currInc > longestInc) {
            longestInc = currInc;
        }
        if (currDec > longestDec) {
            longestDec = currDec;
        }
    }
    
    // return the length of the longest ever-increasing or ever-decreasing segment
    return Math.max(longestInc, longestDec);
}
